import abc
import os
import tensorflow as tf

from komorebi.libs.trainer.trainer_config import TrainerConfiguration
from komorebi.libs.trainer.trainer_utils import batch_data
from komorebi.libs.utilities.io_utils import ensure_directory

CHECKPOINT_DIRECTORY = "model_checkpoints"

class AbstractTrainer(object):
    """Abstract base class for model trainer."""
    __metaclass__ = abc.ABCMeta
   
    @abc.abstractmethod
    def train_model(model, dataset, *args, **kwargs):
        """Train a model on a dataset.

        :param model: model object satisfying abstract model interface
        :param dataset: dataset object satisfying abstract dataset interface
        :return: trained model 
        """
        pass


class AbstractTensorflowTrainer(AbstractTrainer):
    """Abstract base class for model trainer specific to tensorflow."""
    __metaclass__ = abc.ABCMeta

    def __init__(self, config):
        """Initialize trainer.
        
        :param config: trainer_config object.
        """
        assert isinstance(config, TrainerConfiguration)
        paths = _handle_directory_creation(config)

        self.model_training_directory = paths['model_training_directory']
        self.checkpoint_directory = paths['model_checkpoint_directory']
        self.save_frequency = config.save_frequency

        self.epochs = config.epochs
        self.batch_size = config.batch_size


    def train_model(self, model, dataset, optimizer):
        """Train a model on a dataset.

        The default behavior is to call the train and loss op, but this method can be 
        overridden for derived classes.
        
        :param model: model object satisfying abstract model interface
        :param dataset: dataset object satisfying abstract dataset interface
        :return: trained model 
        """
        graph_inputs, ops = self._build_computational_graph(model, optimizer)

        # initialize variables
        init_op = tf.global_variables_initializer()
        tf.get_variable_scope().reuse_variables()
        
        # initialize saver 
        saver = tf.train.Saver()
        save_path = os.path.join(self.checkpoint_directory, "train_iteration")
        
        # initialize session and start training
        with tf.Session() as sess:
            sess.run(init_op)

            for epoch in xrange(self.epochs):
                training_batches = batch_data(dataset, batch_size=self.batch_size)
                for idx, training_batch in enumerate(training_batches):
                   _, loss = sess.run(
                           fetches=[ops['train_op'], ops['loss_op']], 
                           feed_dict=self._convert_training_examples_to_feed_dict(graph_inputs, training_batch))
                
                if (epoch % self.save_frequency == 0):
                    saver.save(sess=sess, save_path=save_path, global_step=epoch)
                    print "saved: {}-{}".format(save_path, epoch)


    @abc.abstractmethod
    def _build_computational_graph(self, model, optimizer):
        """Construct a computational graph for training a model.

        :param model: tensorflow model to be trained
        :param optimizer: optimizer for gradient backpropogation
        :return: 
            2-tuple consisting the two dictionaries. The first dictionary contains tf.placeholders
            representing inputs to the graph. The second dictionary contains ops generated by the graph.
        """
        pass


    @abc.abstractmethod
    def _convert_training_examples_to_feed_dict(self, graph_inputs, training_examples):
        """Convert training inputs to graph inputs.

        Tensorflow models rely on passing a feed_dict into the computational graph.
        This function is responsible for translating the training examples into graph inputs.

        :param graph_inputs: dictionary mapping from string key to tf.placeholders
        :param training_examples: training example types specific to dataset.
        """
        pass


        
def _handle_directory_creation(config):
    """Handle directory creation for model training.

    Create a model training directory structure as follows.

    |-- save_directory
        |-- model_name
            |-- checkpoints
    
    :param config: trainer config
    :return: dictionary holding created paths
    """
    model_training_directory = os.path.join(config.save_directory, config.name)
    model_checkpoint_directory = os.path.join(model_training_directory, CHECKPOINT_DIRECTORY)

    ensure_directory(config.save_directory)
    ensure_directory(model_training_directory)
    ensure_directory(model_checkpoint_directory)

    return {'base_directory': os.path.abspath(config.save_directory), 
            'model_training_directory': os.path.abspath(model_training_directory),
            'model_checkpoint_directory': os.path.abspath(model_checkpoint_directory)}


"""
            # Create prediction signature
            tensor_info_features = tf.saved_model.utils.build_tensor_info(graph_inputs['features'])
            tensor_info_sequences = tf.saved_model.utils.build_tensor_info(graph_inputs['sequences'])
            tensor_info_predictions = tf.saved_model.utils.build_tensor_info(model.predict(graph_inputs['features'], graph_inputs['sequences']).predictions)

            prediction_signature = tf.saved_model.signature_def_utils.build_signature_def(
                    inputs={'features': tensor_info_features, 'sequences': tensor_info_sequences},
                    outputs={'predictions': tensor_info_predictions},
                    method_name="prediction_signature")
                
            # Saving
            import os
            export_dir = os.path.join(self.save_directory, "final_save_model_directory")
            builder = tf.saved_model.builder.SavedModelBuilder(export_dir)
            builder.add_meta_graph_and_variables(sess,
                                                 ["tag"], 
                                                 signature_def_map={"predict": prediction_signature})
            builder.save()
            print "saved final model"

            /private/tmp/tf_checkpoints/final_save_model_directory/saved_model.pb
"""
